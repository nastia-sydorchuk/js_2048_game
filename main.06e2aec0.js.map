{"version":3,"sources":["scripts/main.js"],"names":["board","score","rows","columns","startButton","document","querySelector","messageLoss","messageWin","messageStart","scoreElement","rowsArray","querySelectorAll","cellsArray","setGame","setRandom","updateStyle","tile","number","innerText","classList","value","add","style","display","hasEmpty","r","c","found","Math","floor","random","children","merge","row","filteredRow","filter","n","i","length","innerHTML","push","mergePossible","addEventListener","contains","remove","forEach","a","browserEvent","code","map","el","reverse"],"mappings":"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","file":"main.06e2aec0.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nlet score = 0;\nconst rows = 4;\nconst columns = 4;\nlet board;\n\nconst startButton = document.querySelector('.start');\nconst messageLoss = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst messageStart = document.querySelector('.message-start');\n\nconst scoreElement = document.querySelector('.game-score');\nconst rowsArray = [...document.querySelectorAll('tr')];\nconst cellsArray = [...document.querySelectorAll('.field-cell')];\n\nfunction setGame() {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  setRandom();\n  setRandom();\n}\n\nfunction updateStyle(tile, number) {\n  tile.innerText = '';\n  tile.classList.value = '';\n  tile.classList.add(`field-cell--${number}`, 'field-cell');\n\n  if (number > 0) {\n    tile.innerText = number;\n  }\n\n  if (number === 2048) {\n    messageWin.style.display = 'block';\n  }\n}\n\nfunction hasEmpty() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (board[r][c] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction setRandom() {\n  if (!hasEmpty()) {\n    return;\n  }\n\n  let found = false;\n\n  while (!found) {\n    const r = Math.floor(Math.random() * 4);\n    const c = Math.floor(Math.random() * 4);\n    const random = Math.random() * 100;\n\n    if (board[r][c] === 0) {\n      const tile = rowsArray[r].children[c];\n\n      if (random < 10) {\n        board[r][c] = 4;\n        updateStyle(tile, 4);\n      } else {\n        board[r][c] = 2;\n        updateStyle(tile, 2);\n      }\n\n      found = true;\n    }\n  }\n}\n\nfunction merge(row) {\n  let filteredRow = row.filter(n => n !== 0);\n\n  for (let i = 0; i < filteredRow.length - 1; i++) {\n    if (filteredRow[i] === filteredRow[i + 1]) {\n      filteredRow[i] *= 2;\n      filteredRow[i + 1] = 0;\n      score += filteredRow[i];\n    }\n  }\n\n  scoreElement.innerHTML = score;\n  filteredRow = filteredRow.filter(n => n !== 0);\n\n  while (filteredRow.length < columns) {\n    filteredRow.push(0);\n  }\n\n  return filteredRow;\n}\n\nstartButton.addEventListener('click', () => {\n  if (startButton.classList.contains('start')) {\n    startButton.classList.remove('start');\n    startButton.classList.add('restart');\n    startButton.innerHTML = 'Restart';\n    messageStart.classList.add('hidden');\n    setGame();\n  } else if (startButton.classList.contains('restart')) {\n    cellsArray.forEach(a => updateStyle(a, 0));\n    score = 0;\n    scoreElement.innerHTML = score;\n    messageLoss.style.display = 'none';\n    messageWin.style.display = 'none';\n    setGame();\n  }\n});\n\ndocument.addEventListener('keyup', (browserEvent) => {\n  switch (browserEvent.code) {\n    case 'ArrowUp':\n      for (let c = 0; c < columns; c++) {\n        let row = board.map(el => el[c]);\n\n        row = merge(row);\n\n        for (let r = 0; r < rows; r++) {\n          board[r][c] = row[r];\n\n          const tile = rowsArray[r].children[c];\n          const num = board[r][c];\n\n          updateStyle(tile, num);\n        }\n      }\n\n      setRandom();\n      break;\n    case 'ArrowDown':\n      for (let c = 0; c < columns; c++) {\n        let row = board.map(el => el[c]).reverse();\n\n        row = merge(row);\n        row.reverse();\n\n        for (let r = 0; r < rows; r++) {\n          board[r][c] = row[r];\n\n          const tile = rowsArray[r].children[c];\n          const num = board[r][c];\n\n          updateStyle(tile, num);\n        }\n      }\n\n      setRandom();\n      break;\n    case 'ArrowRight':\n      for (let r = 0; r < rows; r++) {\n        let row = board[r];\n\n        row.reverse();\n        row = merge(row);\n        row.reverse();\n        board[r] = row;\n\n        for (let c = 0; c < columns; c++) {\n          const tile = rowsArray[r].children[c];\n          const num = board[r][c];\n\n          updateStyle(tile, num);\n        }\n      }\n\n      setRandom();\n      break;\n    case 'ArrowLeft':\n      for (let r = 0; r < rows; r++) {\n        let row = board[r];\n\n        row = merge(row);\n        board[r] = row;\n\n        for (let c = 0; c < columns; c++) {\n          const tile = rowsArray[r].children[c];\n          const num = board[r][c];\n\n          updateStyle(tile, num);\n        }\n      }\n\n      setRandom();\n      break;\n  }\n\n  if (!mergePossible() && !hasEmpty()) {\n    messageLoss.style.display = 'block';\n  }\n});\n\nfunction mergePossible() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns - 1; c++) {\n      if (board[r][c] === board[r][c + 1] || board[c][r] === board[c + 1][r]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n"]}